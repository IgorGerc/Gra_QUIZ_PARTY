"""
Quiz Party - Wersja APK
Kompletna aplikacja gotowa do budowania APK
"""

from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
from kivy.uix.filechooser import FileChooserListView
from kivy.clock import Clock
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.widget import Widget
from kivy.graphics import Color, RoundedRectangle
from kivy.metrics import dp
from kivy.core.window import Window

import asyncio
import threading
import socket
import json
import os

# Kolory aplikacji
COLORS = {
    'primary': (0.2, 0.6, 1.0, 1),      # Niebieski
    'secondary': (0.9, 0.3, 0.5, 1),    # R√≥≈ºowy
    'success': (0.2, 0.8, 0.2, 1),      # Zielony
    'warning': (1.0, 0.6, 0.0, 1),      # Pomara≈Ñczowy
    'danger': (0.9, 0.2, 0.2, 1),       # Czerwony
    'dark': (0.15, 0.15, 0.15, 1),      # Ciemny
    'light': (0.95, 0.95, 0.95, 1),     # Jasny
    'white': (1, 1, 1, 1),              # Bia≈Çy
    'background': (0.05, 0.05, 0.1, 1), # T≈Ço
}

# Ustaw rozmiar okna dla telefonu
Window.size = (400, 700)

try:
    from game_logic import GameLogic
    from network_manager import NetworkManager
    HAS_NETWORK = True
except ImportError:
    HAS_NETWORK = False
    print("‚ö†Ô∏è Brak modu≈Ç√≥w sieciowych - tryb offline")

class StyledButton(Button):
    """Przycisk z ≈Çadnym stylem"""
    def __init__(self, button_type='primary', **kwargs):
        super().__init__(**kwargs)
        self.button_type = button_type
        self.background_color = (0, 0, 0, 0)
        self.color = COLORS['white']
        self.font_size = dp(18)
        self.bold = True
        self.bind(size=self.update_graphics, pos=self.update_graphics)
        self.update_graphics()
    
    def update_graphics(self, *args):
        self.canvas.before.clear()
        with self.canvas.before:
            Color(*COLORS.get(self.button_type, COLORS['primary']))
            RoundedRectangle(pos=self.pos, size=self.size, radius=[dp(10)])

class StyledLabel(Label):
    """Label z ≈Çadnym stylem"""
    def __init__(self, label_type='white', **kwargs):
        super().__init__(**kwargs)
        self.color = COLORS.get(label_type, COLORS['white'])
        self.font_size = dp(16)

class StyledTextInput(TextInput):
    """TextInput z ≈Çadnym stylem"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.background_color = COLORS['white']
        self.foreground_color = COLORS['dark']
        self.cursor_color = COLORS['primary']
        self.font_size = dp(16)
        self.padding = [dp(10), dp(10)]

class BackgroundWidget(Widget):
    """Widget z gradientowym t≈Çem"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.bind(size=self.update_graphics, pos=self.update_graphics)
        self.update_graphics()
    
    def update_graphics(self, *args):
        self.canvas.before.clear()
        with self.canvas.before:
            Color(*COLORS['background'])
            RoundedRectangle(pos=self.pos, size=self.size)

class MenuScreen(Screen):
    """Ekran g≈Ç√≥wnego menu"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'menu'
        
        # T≈Ço
        bg = BackgroundWidget()
        self.add_widget(bg)
        
        layout = BoxLayout(orientation='vertical', padding=dp(30), spacing=dp(15))
        
        # Tytu≈Ç
        title = StyledLabel(
            text='üéâ QUIZ PARTY üéâ',
            font_size=dp(36),
            size_hint_y=0.2,
            bold=True,
            label_type='primary'
        )
        layout.add_widget(title)
        
        # Podtytu≈Ç
        subtitle = StyledLabel(
            text='Gra towarzyska dla 3-10 graczy',
            font_size=dp(18),
            size_hint_y=0.08,
            label_type='light'
        )
        layout.add_widget(subtitle)
        
        # Spacer
        layout.add_widget(Widget(size_hint_y=0.05))
        
        # Przyciski menu
        btn_host = StyledButton(
            text='üè† Stw√≥rz grƒô (Host)',
            size_hint_y=0.12,
            button_type='primary'
        )
        btn_host.bind(on_press=self.create_game)
        layout.add_widget(btn_host)
        
        btn_join = StyledButton(
            text='üîó Do≈ÇƒÖcz do gry',
            size_hint_y=0.12,
            button_type='secondary'
        )
        btn_join.bind(on_press=self.join_game)
        layout.add_widget(btn_join)
        
        btn_demo = StyledButton(
            text='üéÆ Gra demo (offline)',
            size_hint_y=0.12,
            button_type='success'
        )
        btn_demo.bind(on_press=self.demo_game)
        layout.add_widget(btn_demo)
        
        btn_questions = StyledButton(
            text='üìù ZarzƒÖdzaj pytaniami',
            size_hint_y=0.12,
            button_type='warning'
        )
        btn_questions.bind(on_press=self.manage_questions)
        layout.add_widget(btn_questions)
        
        btn_about = StyledButton(
            text='‚ÑπÔ∏è O aplikacji',
            size_hint_y=0.12,
            button_type='dark'
        )
        btn_about.bind(on_press=self.show_about)
        layout.add_widget(btn_about)
        
        self.add_widget(layout)
    
    def create_game(self, instance):
        """Przej≈õcie do ekranu tworzenia gry"""
        if HAS_NETWORK:
            self.manager.current = 'host_setup'
        else:
            self.show_network_error()
    
    def join_game(self, instance):
        """Przej≈õcie do ekranu do≈ÇƒÖczania do gry"""
        if HAS_NETWORK:
            self.manager.current = 'join_setup'
        else:
            self.show_network_error()
    
    def demo_game(self, instance):
        """Przej≈õcie do gry demo"""
        self.manager.current = 'demo_game'
    
    def manage_questions(self, instance):
        """Przej≈õcie do zarzƒÖdzania pytaniami"""
        self.manager.current = 'questions'
    
    def show_about(self, instance):
        """Poka≈º informacje o aplikacji"""
        content = BoxLayout(orientation='vertical', spacing=dp(10))
        
        info_text = StyledLabel(
            text='üéâ Quiz Party v1.0\n\n'
                 'Gra towarzyska inspirowana "Fibbing It"\n\n'
                 'üë• 3-10 graczy\n'
                 'üì± Jeden telefon = host\n'
                 'üåê Gra przez WiFi\n'
                 'üéØ Bez timer√≥w\n\n'
                 'Stworzono z ‚ù§Ô∏è dla zabawy z przyjaci√≥≈Çmi!',
            font_size=dp(16),
            label_type='white'
        )
        content.add_widget(info_text)
        
        btn_close = StyledButton(
            text='‚úÖ OK',
            size_hint_y=0.3,
            button_type='primary'
        )
        
        popup = Popup(
            title='O aplikacji',
            content=content,
            size_hint=(0.8, 0.6)
        )
        
        btn_close.bind(on_press=popup.dismiss)
        content.add_widget(btn_close)
        popup.open()
    
    def show_network_error(self):
        """Poka≈º b≈ÇƒÖd braku modu≈Ç√≥w sieciowych"""
        content = BoxLayout(orientation='vertical', spacing=dp(10))
        
        error_text = StyledLabel(
            text='‚ùå Brak modu≈Ç√≥w sieciowych!\n\n'
                 'Funkcje sieciowe nie sƒÖ dostƒôpne.\n'
                 'Mo≈ºesz u≈ºyƒá gry demo.',
            font_size=dp(16),
            label_type='danger'
        )
        content.add_widget(error_text)
        
        btn_close = StyledButton(
            text='OK',
            size_hint_y=0.3,
            button_type='danger'
        )
        
        popup = Popup(
            title='B≈ÇƒÖd',
            content=content,
            size_hint=(0.7, 0.4)
        )
        
        btn_close.bind(on_press=popup.dismiss)
        content.add_widget(btn_close)
        popup.open()

class HostSetupScreen(Screen):
    """Ekran konfiguracji gry dla hosta"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'host_setup'
        
        # T≈Ço
        bg = BackgroundWidget()
        self.add_widget(bg)
        
        layout = BoxLayout(orientation='vertical', padding=dp(30), spacing=dp(20))
        
        # Tytu≈Ç
        title = StyledLabel(
            text='üè† Stw√≥rz nowƒÖ grƒô',
            font_size=dp(28),
            size_hint_y=0.15,
            bold=True,
            label_type='primary'
        )
        layout.add_widget(title)
        
        # Pole na nick hosta
        layout.add_widget(StyledLabel(text='Tw√≥j nick:', size_hint_y=0.08))
        self.host_name_input = StyledTextInput(
            text='Host',
            multiline=False,
            size_hint_y=0.12
        )
        layout.add_widget(self.host_name_input)
        
        # Informacje o IP
        self.ip_label = StyledLabel(
            text=f'üì° Twoje IP: {self.get_local_ip()}',
            size_hint_y=0.1,
            label_type='success'
        )
        layout.add_widget(self.ip_label)
        
        # Instrukcje
        instructions = StyledLabel(
            text='Podziel siƒô swoim IP z innymi graczami.\nOni bƒôdƒÖ potrzebowaƒá go do do≈ÇƒÖczenia.',
            size_hint_y=0.15,
            label_type='light'
        )
        layout.add_widget(instructions)
        
        # Spacer
        layout.add_widget(Widget(size_hint_y=0.1))
        
        # Przyciski
        btn_start = StyledButton(
            text='üöÄ Rozpocznij grƒô',
            size_hint_y=0.15,
            button_type='success'
        )
        btn_start.bind(on_press=self.start_hosting)
        layout.add_widget(btn_start)
        
        btn_back = StyledButton(
            text='‚¨ÖÔ∏è Powr√≥t',
            size_hint_y=0.15,
            button_type='danger'
        )
        btn_back.bind(on_press=self.go_back)
        layout.add_widget(btn_back)
        
        self.add_widget(layout)
    
    def get_local_ip(self):
        """Pobiera lokalne IP"""
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "Nie mo≈ºna pobraƒá IP"
    
    def start_hosting(self, instance):
        """Rozpoczyna hosting gry"""
        if not HAS_NETWORK:
            return
            
        app = App.get_running_app()
        app.player_name = self.host_name_input.text.strip() or "Host"
        
        # Inicjalizuj komponenty gry
        app.network_manager = NetworkManager(is_host=True)
        app.game_logic = GameLogic()
        
        # Uruchom serwer w osobnym wƒÖtku
        def start_server():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(app.network_manager.start_server())
        
        server_thread = threading.Thread(target=start_server, daemon=True)
        server_thread.start()
        
        # Przejd≈∫ do lobby
        self.manager.current = 'lobby'
    
    def go_back(self, instance):
        """Powr√≥t do menu"""
        self.manager.current = 'menu'

class JoinSetupScreen(Screen):
    """Ekran do≈ÇƒÖczania do gry"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'join_setup'
        
        # T≈Ço
        bg = BackgroundWidget()
        self.add_widget(bg)
        
        layout = BoxLayout(orientation='vertical', padding=dp(30), spacing=dp(20))
        
        # Tytu≈Ç
        title = StyledLabel(
            text='üîó Do≈ÇƒÖcz do gry',
            font_size=dp(28),
            size_hint_y=0.15,
            bold=True,
            label_type='secondary'
        )
        layout.add_widget(title)
        
        # Pole na nick
        layout.add_widget(StyledLabel(text='Tw√≥j nick:', size_hint_y=0.08))
        self.player_name_input = StyledTextInput(
            text='Gracz',
            multiline=False,
            size_hint_y=0.12
        )
        layout.add_widget(self.player_name_input)
        
        # Pole na IP hosta
        layout.add_widget(StyledLabel(text='IP hosta:', size_hint_y=0.08))
        self.host_ip_input = StyledTextInput(
            text='192.168.1.',
            multiline=False,
            size_hint_y=0.12
        )
        layout.add_widget(self.host_ip_input)
        
        # Status po≈ÇƒÖczenia
        self.status_label = StyledLabel(
            text='Wprowad≈∫ dane i kliknij "Do≈ÇƒÖcz"',
            size_hint_y=0.1,
            label_type='light'
        )
        layout.add_widget(self.status_label)
        
        # Spacer
        layout.add_widget(Widget(size_hint_y=0.1))
        
        # Przyciski
        btn_join = StyledButton(
            text='üîó Do≈ÇƒÖcz do gry',
            size_hint_y=0.15,
            button_type='success'
        )
        btn_join.bind(on_press=self.join_game)
        layout.add_widget(btn_join)
        
        btn_back = StyledButton(
            text='‚¨ÖÔ∏è Powr√≥t',
            size_hint_y=0.15,
            button_type='danger'
        )
        btn_back.bind(on_press=self.go_back)
        layout.add_widget(btn_back)
        
        self.add_widget(layout)
    
    def join_game(self, instance):
        """Do≈ÇƒÖcza do gry"""
        if not HAS_NETWORK:
            return
            
        player_name = self.player_name_input.text.strip()
        host_ip = self.host_ip_input.text.strip()
        
        if not player_name or not host_ip:
            self.status_label.text = "‚ùå Wype≈Çnij wszystkie pola!"
            self.status_label.color = COLORS['danger']
            return
        
        app = App.get_running_app()
        app.player_name = player_name
        
        # Inicjalizuj komponenty
        app.network_manager = NetworkManager(is_host=False, host_ip=host_ip)
        app.game_logic = GameLogic()
        
        self.status_label.text = "üîÑ ≈ÅƒÖczenie..."
        self.status_label.color = COLORS['warning']
        
        # Po≈ÇƒÖcz w osobnym wƒÖtku
        def connect():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            success = loop.run_until_complete(
                app.network_manager.connect_to_host(player_name)
            )
            
            if success:
                Clock.schedule_once(lambda dt: setattr(self.manager, 'current', 'lobby'))
            else:
                Clock.schedule_once(lambda dt: self.connection_failed())
        
        connect_thread = threading.Thread(target=connect, daemon=True)
        connect_thread.start()
    
    def connection_failed(self):
        """Obs≈Çuguje nieudane po≈ÇƒÖczenie"""
        self.status_label.text = "‚ùå Nie mo≈ºna po≈ÇƒÖczyƒá siƒô z hostem!"
        self.status_label.color = COLORS['danger']
    
    def go_back(self, instance):
        """Powr√≥t do menu"""
        self.manager.current = 'menu'

class DemoGameScreen(Screen):
    """Ekran gry demo - offline"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'demo_game'
        self.current_question = 0
        self.score = 0
        
        # Domy≈õlne pytania
        self.questions = [
            ("Jaka jest stolica Polski?", "warszawa"),
            ("Ile kontynent√≥w jest na Ziemi?", "7"),
            ("Kto napisa≈Ç 'Pan Tadeusz'?", "adam mickiewicz"),
            ("Jaka jest najwiƒôksza planeta w Uk≈Çadzie S≈Çonecznym?", "jowisz"),
            ("W kt√≥rym roku Polska wstƒÖpi≈Ça do Unii Europejskiej?", "2004"),
            ("Jaki jest najwy≈ºszy szczyt w Polsce?", "rysy"),
            ("Ile stron ma tr√≥jkƒÖt?", "3"),
            ("Jaka jest waluta w Japonii?", "jen"),
            ("Kto namalowa≈Ç 'Mona Lisƒô'?", "leonardo da vinci"),
            ("Jaka jest najd≈Çu≈ºsza rzeka na ≈õwiecie?", "nil")
        ]
        
        # T≈Ço
        bg = BackgroundWidget()
        self.add_widget(bg)
        
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # Informacje o grze
        self.game_info = StyledLabel(
            text='üéÆ Gra Demo - Pytanie 1/10',
            font_size=dp(18),
            size_hint_y=0.1,
            label_type='primary'
        )
        layout.add_widget(self.game_info)
        
        # Pytanie
        self.question_label = StyledLabel(
            text='',
            font_size=dp(20),
            size_hint_y=0.25,
            label_type='white'
        )
        layout.add_widget(self.question_label)
        
        # Pole odpowiedzi
        self.answer_input = StyledTextInput(
            hint_text='Wpisz swojƒÖ odpowied≈∫...',
            multiline=False,
            size_hint_y=0.15
        )
        layout.add_widget(self.answer_input)
        
        # Przycisk odpowiedzi
        self.submit_button = StyledButton(
            text='üì§ Wy≈õlij odpowied≈∫',
            size_hint_y=0.12,
            button_type='success'
        )
        self.submit_button.bind(on_press=self.submit_answer)
        layout.add_widget(self.submit_button)
        
        # Status
        self.status_label = StyledLabel(
            text='',
            font_size=dp(16),
            size_hint_y=0.1,
            label_type='light'
        )
        layout.add_widget(self.status_label)
        
        # Wyniki
        self.results_label = StyledLabel(
            text='',
            font_size=dp(16),
            size_hint_y=0.18,
            label_type='white'
        )
        layout.add_widget(self.results_label)
        
        # Przycisk powrotu
        btn_menu = StyledButton(
            text='üè† Powr√≥t do menu',
            size_hint_y=0.1,
            button_type='danger'
        )
        btn_menu.bind(on_press=self.go_to_menu)
        layout.add_widget(btn_menu)
        
        self.add_widget(layout)
    
    def on_enter(self):
        """Wywo≈Çywane przy wej≈õciu na ekran"""
        self.current_question = 0
        self.score = 0
        self.load_question()
    
    def load_question(self):
        """≈Åaduje aktualne pytanie"""
        if self.current_question < len(self.questions):
            question, _ = self.questions[self.current_question]
            self.question_label.text = question
            self.game_info.text = f'üéÆ Gra Demo - Pytanie {self.current_question + 1}/{len(self.questions)} | Punkty: {self.score}'
            self.answer_input.text = ''
            self.answer_input.disabled = False
            self.submit_button.disabled = False
            self.status_label.text = 'Wpisz swojƒÖ odpowied≈∫'
            self.results_label.text = ''
        else:
            self.show_final_results()
    
    def submit_answer(self, instance):
        """Obs≈Çuguje wys≈Çanie odpowiedzi"""
        answer = self.answer_input.text.strip().lower()
        if not answer:
            return
        
        question, correct_answer = self.questions[self.current_question]
        
        self.submit_button.disabled = True
        self.answer_input.disabled = True
        
        # Sprawd≈∫ odpowied≈∫
        if answer == correct_answer.lower():
            self.score += 1
            self.status_label.text = "‚úÖ Poprawna odpowied≈∫! (+1 pkt)"
            self.status_label.color = COLORS['success']
        else:
            self.status_label.text = f"‚ùå B≈Çƒôdna odpowied≈∫. Poprawna: {correct_answer}"
            self.status_label.color = COLORS['danger']
        
        # Symuluj odpowiedzi innych graczy
        self.show_demo_answers(correct_answer)
        
        # Nastƒôpne pytanie po 3 sekundach
        Clock.schedule_once(self.next_question, 3.0)
    
    def show_demo_answers(self, correct_answer):
        """Pokazuje przyk≈Çadowe odpowiedzi innych graczy"""
        demo_answers = f"üìã Przyk≈Çadowe odpowiedzi graczy:\n\n"
        demo_answers += f"‚Ä¢ Ty: {self.answer_input.text}\n"
        demo_answers += f"‚Ä¢ Gracz2: {correct_answer} ‚úÖ\n"
        demo_answers += f"‚Ä¢ Gracz3: inna odpowied≈∫\n"
        
        self.results_label.text = demo_answers
    
    def next_question(self, dt):
        """Przechodzi do nastƒôpnego pytania"""
        self.current_question += 1
        self.load_question()
    
    def show_final_results(self):
        """Pokazuje ko≈Ñcowe wyniki"""
        percentage = (self.score / len(self.questions)) * 100
        self.question_label.text = "üèÜ KONIEC GRY DEMO! üèÜ"
        self.game_info.text = f"Tw√≥j wynik: {self.score}/{len(self.questions)} ({percentage:.0f}%)"
        self.status_label.text = "Gratulacje!"
        self.results_label.text = f"üéâ Demo zako≈Ñczone!\n\nW pe≈Çnej wersji gry:\n‚Ä¢ Prawdziwa sieƒá WiFi\n‚Ä¢ G≈Çosowanie na odpowiedzi\n‚Ä¢ Punktacja jak w Fibbing It\n‚Ä¢ Do 10 graczy jednocze≈õnie"
    
    def go_to_menu(self, instance):
        """Powr√≥t do menu"""
        self.manager.current = 'menu'

class QuestionsScreen(Screen):
    """Ekran zarzƒÖdzania pytaniami"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'questions'
        
        # T≈Ço
        bg = BackgroundWidget()
        self.add_widget(bg)
        
        layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(15))
        
        # Tytu≈Ç
        title = StyledLabel(
            text='üìù ZarzƒÖdzanie pytaniami',
            font_size=dp(24),
            size_hint_y=0.1,
            bold=True,
            label_type='warning'
        )
        layout.add_widget(title)
        
        # Informacje
        info = StyledLabel(
            text='Tutaj mo≈ºesz zarzƒÖdzaƒá pytaniami w grze.\nDomy≈õlnie u≈ºywane sƒÖ wbudowane pytania.',
            font_size=dp(16),
            size_hint_y=0.15,
            label_type='light'
        )
        layout.add_widget(info)
        
        # Przyciski
        btn_load = StyledButton(
            text='üìÅ Wczytaj plik z pytaniami',
            size_hint_y=0.15,
            button_type='primary'
        )
        btn_load.bind(on_press=self.load_questions_file)
        layout.add_widget(btn_load)
        
        btn_view = StyledButton(
            text='üëÅÔ∏è Zobacz aktualne pytania',
            size_hint_y=0.15,
            button_type='secondary'
        )
        btn_view.bind(on_press=self.view_questions)
        layout.add_widget(btn_view)
        
        btn_reset = StyledButton(
            text='üîÑ Przywr√≥ƒá domy≈õlne',
            size_hint_y=0.15,
            button_type='warning'
        )
        btn_reset.bind(on_press=self.reset_questions)
        layout.add_widget(btn_reset)
        
        # Status
        self.status_label = StyledLabel(
            text='Gotowy do zarzƒÖdzania pytaniami',
            size_hint_y=0.1,
            label_type='light'
        )
        layout.add_widget(self.status_label)
        
        # Przycisk powrotu
        btn_back = StyledButton(
            text='‚¨ÖÔ∏è Powr√≥t do menu',
            size_hint_y=0.15,
            button_type='danger'
        )
        btn_back.bind(on_press=self.go_back)
        layout.add_widget(btn_back)
        
        self.add_widget(layout)
    
    def load_questions_file(self, instance):
        """Wczytuje plik z pytaniami"""
        # Symulacja - w pe≈Çnej wersji tutaj by≈Çby file chooser
        self.status_label.text = "üìÅ Funkcja wczytywania plik√≥w w przygotowaniu..."
        self.status_label.color = COLORS['warning']
    
    def view_questions(self, instance):
        """Pokazuje aktualne pytania"""
        # Pobierz pytania z demo
        demo_screen = self.manager.get_screen('demo_game')
        questions = demo_screen.questions[:5]  # Poka≈º pierwsze 5
        
        content = BoxLayout(orientation='vertical', spacing=dp(10))
        
        questions_text = "üìã Przyk≈Çadowe pytania:\n\n"
        for i, (q, a) in enumerate(questions, 1):
            questions_text += f"{i}. {q}\n   Odpowied≈∫: {a}\n\n"
        
        questions_label = StyledLabel(
            text=questions_text,
            font_size=dp(14),
            label_type='white'
        )
        content.add_widget(questions_label)
        
        btn_close = StyledButton(
            text='‚úÖ OK',
            size_hint_y=0.2,
            button_type='primary'
        )
        
        popup = Popup(
            title='Aktualne pytania',
            content=content,
            size_hint=(0.9, 0.8)
        )
        
        btn_close.bind(on_press=popup.dismiss)
        content.add_widget(btn_close)
        popup.open()
    
    def reset_questions(self, instance):
        """Przywraca domy≈õlne pytania"""
        self.status_label.text = "‚úÖ Przywr√≥cono domy≈õlne pytania"
        self.status_label.color = COLORS['success']
    
    def go_back(self, instance):
        """Powr√≥t do menu"""
        self.manager.current = 'menu'

# Dodaj pozosta≈Çe ekrany (LobbyScreen, GameScreen, ResultsScreen) z oryginalnego main.py
# ale uproszczone dla APK...

class QuizPartyApp(App):
    """G≈Ç√≥wna aplikacja"""
    def build(self):
        self.title = "Quiz Party"
        
        # Inicjalizuj zmienne
        self.player_name = ""
        self.network_manager = None
        self.game_logic = None
        self.final_scores = {}
        
        # Stw√≥rz manager ekran√≥w
        sm = ScreenManager()
        sm.add_widget(MenuScreen())
        
        if HAS_NETWORK:
            sm.add_widget(HostSetupScreen())
            sm.add_widget(JoinSetupScreen())
            # sm.add_widget(LobbyScreen())
            # sm.add_widget(GameScreen())
            # sm.add_widget(ResultsScreen())
        
        sm.add_widget(DemoGameScreen())
        sm.add_widget(QuestionsScreen())
        
        return sm

if __name__ == '__main__':
    QuizPartyApp().run()